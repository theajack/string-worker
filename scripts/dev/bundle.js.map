{
  "version": 3,
  "sources": ["../../src/util.ts", "../../src/index.ts", "index.ts"],
  "sourcesContent": ["/*\n * @Author: tackchen\n * @Date: 2022-08-06 16:45:41\n * @Description: Coding something\n */\n\nexport function codeToBlob (code: string) {\n  const blob = new window.Blob([code], {type: 'text/javascript'}); // \u751F\u6210js\u6587\u4EF6\u5BF9\u8C61\n  const objectURL = window.URL.createObjectURL(blob); // \u751F\u6210js\u6587\u4EF6\u7684url\n  return objectURL;\n}\n\nexport function uuid () {\n  const s: string[] = [];\n  const hexDigits = '0123456789abcdef';\n  for (let i = 0; i < 36; i++) s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n\n  s[14] = '4';  // bits 12-15 of the time_hi_and_version field to 0010\n  s[19] = hexDigits.substr(((s[19] as any) & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\n  s[8] = '-';\n  s[13] = '-';\n  s[18] = '-';\n  s[23] = '-';\n  const uuid = s.join('');\n  return uuid;\n}", "/*\n * @Author: tackchen\n * @Date: 2022-08-03 20:33:13\n * @Description: Coding something\n */\n\nimport {IJson, IMessageData} from './type';\nimport {codeToBlob, uuid} from './util';\n\nexport class StringWorker {\n  private _worker: Worker;\n\n  private _resolveMap: IJson<Function> = {};\n\n  private _onMessageListeners: ((message: any) => void)[] = [];\n\n  constructor (code: string) {\n    this._worker = new Worker(codeToBlob(code));\n\n    this._worker.onmessage = (e: {data: IMessageData}) => {\n      console.log('receive', e);\n      const {id, message} = e.data;\n      this._onMessageListeners.forEach(fn => {fn(message);});\n      const resolve = this._resolveMap[id];\n      if (resolve) {\n        resolve(message);\n        delete this._resolveMap[id];\n      }\n    };\n  }\n\n  async postMessage (message: any, id = uuid()): Promise<any> {\n    return new Promise((resolve) => {\n      this._resolveMap[id] = resolve;\n      this._worker.postMessage({message, id});\n    });\n  }\n\n  onMessage (listener: (message: any) => void) {\n    this._onMessageListeners.push(listener);\n  }\n}", "/*\n * @Author: tackchen\n * @Date: 2022-08-03 20:32:39\n * @Description: Coding something\n */\n\nimport {StringWorker} from '../../src/index';\n\nconst win = (window as any);\n\nwin.sw = new StringWorker(/* javascript*/`\n  globalThis.addEventListener('message', function (\n    e\n  ) {\n    const {message, id} = e.data;\n    console.log(e);\n\n    const result = ((msg) => {\n      return msg + ' return';\n    })(message);\n\n    if (result instanceof Promise) {\n      result.then(function (data) {\n        globalThis.postMessage({id, message: data});\n      });\n    } else {\n      globalThis.postMessage({id, message: result});\n    }\n  }, false);\n`);\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAMO,oBAAqB,MAAc;AACxC,QAAM,OAAO,IAAI,OAAO,KAAK,CAAC,IAAI,GAAG,EAAC,MAAM,kBAAiB,CAAC;AAC9D,QAAM,YAAY,OAAO,IAAI,gBAAgB,IAAI;AACjD,SAAO;AACT;AAEO,gBAAiB;AACtB,QAAM,IAAc,CAAC;AACrB,QAAM,YAAY;AAClB,WAAS,IAAI,GAAG,IAAI,IAAI;AAAK,MAAE,KAAK,UAAU,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,EAAI,GAAG,CAAC;AAExF,IAAE,MAAM;AACR,IAAE,MAAM,UAAU,OAAS,EAAE,MAAc,IAAO,GAAK,CAAC;AACxD,IAAE,KAAK;AACP,IAAE,MAAM;AACR,IAAE,MAAM;AACR,IAAE,MAAM;AACR,QAAM,QAAO,EAAE,KAAK,EAAE;AACtB,SAAO;AACT;;;AChBO,IAAM,eAAN,MAAmB;AAAA,EAOxB,YAAa,MAAc;AAJ3B,SAAQ,cAA+B,CAAC;AAExC,SAAQ,sBAAkD,CAAC;AAGzD,SAAK,UAAU,IAAI,OAAO,WAAW,IAAI,CAAC;AAE1C,SAAK,QAAQ,YAAY,CAAC,MAA4B;AACpD,cAAQ,IAAI,WAAW,CAAC;AACxB,YAAM,EAAC,IAAI,YAAW,EAAE;AACxB,WAAK,oBAAoB,QAAQ,QAAM;AAAC,WAAG,OAAO;AAAA,MAAE,CAAC;AACrD,YAAM,UAAU,KAAK,YAAY;AACjC,UAAI,SAAS;AACX,gBAAQ,OAAO;AACf,eAAO,KAAK,YAAY;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AAAA,EAEA,AAAM,YAAa,IAAyC;AAAA,+CAAzC,SAAc,KAAK,KAAK,GAAiB;AAC1D,aAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,aAAK,YAAY,MAAM;AACvB,aAAK,QAAQ,YAAY,EAAC,SAAS,GAAE,CAAC;AAAA,MACxC,CAAC;AAAA,IACH;AAAA;AAAA,EAEA,UAAW,UAAkC;AAC3C,SAAK,oBAAoB,KAAK,QAAQ;AAAA,EACxC;AACF;;;ACjCA,IAAM,MAAO;AAEb,IAAI,KAAK,IAAI,aAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAmBxC;",
  "names": []
}
