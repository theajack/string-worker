{
  "version": 3,
  "sources": ["../../src/util.ts", "../../src/index.ts", "index.ts"],
  "sourcesContent": ["/*\n * @Author: tackchen\n * @Date: 2022-08-06 16:45:41\n * @Description: Coding something\n */\n\nexport function codeToBlob (code: string) {\n  const blob = new window.Blob([code], {type: 'text/javascript'}); // \u751F\u6210js\u6587\u4EF6\u5BF9\u8C61\n  const objectURL = window.URL.createObjectURL(blob); // \u751F\u6210js\u6587\u4EF6\u7684url\n  return objectURL;\n}\n\nexport function uuid () {\n  const s: string[] = [];\n  const hexDigits = '0123456789abcdef';\n  for (let i = 0; i < 36; i++) s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n\n  s[14] = '4';  // bits 12-15 of the time_hi_and_version field to 0010\n  s[19] = hexDigits.substr(((s[19] as any) & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\n  s[8] = '-';\n  s[13] = '-';\n  s[18] = '-';\n  s[23] = '-';\n  const uuid = s.join('');\n  return uuid;\n}", "/*\n * @Author: tackchen\n * @Date: 2022-08-03 20:33:13\n * @Description: Coding something\n */\n\nimport {IJson, IMessageData} from './type';\nimport {codeToBlob, uuid} from './util';\n\n\nexport interface IStringWorkerOptions<SetUpData=any, SendData=any, ReceiveData=SendData> {\n  setup?: () => SetUpData;\n  onmessage: (message: SendData, data: SetUpData) => ReceiveData;\n}\n\nconst SWHelper = {\n  buildCode ({setup, onmessage}: IStringWorkerOptions) {\n\n    const setupString = (typeof setup === 'undefined')\n      ? '{}'\n      : this.funcToString(setup);\n\n    return /* javascript*/`\nconst window = globalThis;\nconst globalData = ${setupString};\nglobalThis.addEventListener('message', function (\n  e\n) {\n  const {message, id} = e.data;\n  console.log(e);\n\n  const result = ${this.funcToString(onmessage, 'message, globalData')}\n\n  if (result instanceof Promise) {\n    result.then(function (data) {\n      globalThis.postMessage({id, message: data});\n    });\n  } else {\n    globalThis.postMessage({id, message: result});\n  }\n}, false);`;\n  },\n\n  funcToString (func: Function, argName = '') {\n    let str = func.toString();\n    const title = str.substring(0, str.indexOf('{'));\n    if (!title.includes('function') && !title.includes('=>')) {\n      str = `function ${str}`;\n    }\n    return `(${str})(${argName})`;\n  }\n};\n\nexport class StringWorker<SetUpData=any, SendData=any, ReceiveData=SendData> {\n  static version: string = '0.0.1';\n  private _worker: Worker;\n\n  private _resolveMap: IJson<Function> = {};\n\n  private _onMessageListeners: ((message: any) => void)[] = [];\n\n  private _isOriginMessage: boolean = false;\n\n  constructor (options: string | IStringWorkerOptions<SetUpData, SendData, ReceiveData>) {\n\n    let code: string = '';\n    if (typeof options === 'string') {\n      this._isOriginMessage = true;\n      code = options as string;\n    } else {\n      code = SWHelper.buildCode(options);\n    }\n\n    this._worker = new Worker(codeToBlob(code));\n\n    this._worker.onmessage = (e: {data: IMessageData<SendData>}) => {\n      let message: any, id: string = '';\n      if (typeof e.data === 'object') {\n        message = e.data.message;\n        id = e.data.id;\n      } else {\n        message = e.data;\n      }\n      this._onMessageListeners.forEach(fn => {fn(message);});\n      if (id) {\n        const resolve = this._resolveMap[id];\n        if (resolve) {\n          resolve(message);\n          delete this._resolveMap[id];\n        }\n      }\n    };\n  }\n\n  postMessage (message: SendData, id?: string): Promise<ReceiveData> {\n    if (this._isOriginMessage) {\n      this._worker.postMessage(message);\n      const id = (message as any)?.id;\n      if (id) {\n        return new Promise(resolve => {\n          this._resolveMap[id] = resolve;\n        });\n      }\n      return Promise.resolve(null as any);\n    } else {\n      return new Promise((resolve) => {\n        if (!id) id = uuid();\n        this._resolveMap[id] = resolve;\n        this._worker.postMessage({message, id});\n      });\n    }\n  }\n\n  onMessage (listener: (message: any) => void) {\n    this._onMessageListeners.push(listener);\n  }\n}", "/*\n * @Author: tackchen\n * @Date: 2022-08-03 20:32:39\n * @Description: Coding something\n */\n\nimport {StringWorker} from '../../src/index';\n\nconst win = (window as any);\n\n// const worker = new StringWorker(/* javascript*/`\n//   globalThis.addEventListener('message', function (e) {\n//     var data = e.data;\n//     console.log('Worker Receive: ', data);\n//     globalThis.postMessage('Worker Send: '+data)\n//   }, false);\n// `);\n\n// worker.onMessage(data => {\n//   console.log(data);\n// });\n\n\n// const worker = new StringWorker(/* javascript*/`\n//   globalThis.addEventListener('message', function (e) {\n//     var data = e.data;\n//     console.log('Worker Receive: ', data);\n//     globalThis.postMessage({\n//       message: 'Worker Send: '+data.message,\n//       id: data.id\n//     })\n//   }, false);\n// `);\n\n// let id = 0;\n// worker.postMessage({\n//   message: 'Hello World',\n//   id: `${id++}`\n// }).then(d => {\n//   console.log('Worker Return: ', d);\n// });\n\nconst worker = new StringWorker<\n  {msg: string}, // setup\u8FD4\u56DE\u503C\n  {send: string}, // \u53D1\u9001\u7684\u7C7B\u578B\n  {receive: string} // \u8FD4\u56DE\u7684\u7C7B\u578B\n>({\n  setup () {\n    return {msg: 'hello world'};\n  },\n  onmessage (message, data) {\n    return {receive: message.send + data.msg};\n  }\n});\n\nworker.postMessage({send: 'Hello'}).then(d => {\n  console.log(d);\n});\n\nwin.sw = worker;\n\n"],
  "mappings": "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",
  "names": []
}
